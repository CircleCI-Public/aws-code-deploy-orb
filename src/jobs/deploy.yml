description: >
  Ensures an application and deployment group exist then proceeds to
  bundle and upload an application revision to S3. Once uploaded this
  job will finally create a deployment based on that revision.
parameters:
  application_name:
    description:
      "The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account."
    type: string
  deployment_group:
    description:
      "The name of a new deployment group for the specified application."
    type: string
  deployment_config:
    description:
      "Predefined deployment configuration name."
    type: enum
    enum: [ CodeDeployDefault.OneAtATime, CodeDeployDefault.HalfAtATime, CodeDeployDefault.AllAtOnce ]
    default: "CodeDeployDefault.OneAtATime"
  service_role_arn:
    description:
      "The service role for a deployment group."
    type: string
  bundle_source:
    description:
      "The directory relative to your project to package up into an application revision."
    type: string
    default: "."
  bundle_bucket:
    description:
      "The s3 bucket where an application revision will be stored"
    type: string
  bundle_key:
    description:
      "A key under the s3 bucket where an application revision will be stored"
    type: string
  bundle_type:
    description:
      "The file type used for an application revision bundle. Currently defaults to 'zip'"
    type: string
    default: "zip"
  arguments:
    description: If you wish to pass any additional arguments to the aws deploy command
    type: string
    default: ''
  get_deployment_group_arguments:
    description: If you wish to pass any additional arguments to the get-deployment-group command
    type: string
    default: ''
  deploy_bundle_arguments:
    description: If you wish to pass any additional arguments to the deploy_bundle command
    type: string
    default: ''
  profile_name:
    description:
      "The name of an AWS profile to use with aws-cli commands"
    type: string
    default: 'default'
  auth:
    description: |
      The authentication method used to access your AWS account. Import the aws-cli orb in your config and
      provide the aws-cli/setup command to authenticate with your preferred method. View examples for more information.
    type: steps
  region:
    type: string
    default: ${AWS_DEFAULT_REGION}
    description: >
      AWS region of CodeDeploy App. Defaults to environment variable ${AWS_DEFAULT_REGION}.
  executor:
    description: The executor to use for this job. By default, this will use the "default" executor provided by this orb.
    type: executor
    default: default
executor: << parameters.executor >>
steps:
  - checkout
  - steps: << parameters.auth >>
  - create_application:
      application_name: << parameters.application_name >>
      arguments: << parameters.arguments >>
      profile_name: << parameters.profile_name >>
      region: << parameters.region >>
  - create_deployment_group:
      application_name: << parameters.application_name >>
      deployment_group: << parameters.deployment_group >>
      deployment_config: << parameters.deployment_config >>
      service_role_arn: << parameters.service_role_arn >>
      get_deployment_group_arguments: << parameters.get_deployment_group_arguments >>
      arguments: << parameters.arguments >>
      profile_name: << parameters.profile_name >>
      region: << parameters.region >>
  - push_bundle:
      application_name: << parameters.application_name >>
      bundle_source: << parameters.bundle_source >>
      bundle_bucket: << parameters.bundle_bucket >>
      bundle_key: << parameters.bundle_key >>
      bundle_type: << parameters.bundle_type >>
      arguments: << parameters.arguments >>
      profile_name: << parameters.profile_name >>
      region: << parameters.region >>
  - deploy_bundle:
      application_name: << parameters.application_name >>
      deployment_group: << parameters.deployment_group >>
      deployment_config: << parameters.deployment_config >>
      bundle_bucket: << parameters.bundle_bucket >>
      bundle_key: << parameters.bundle_key >>
      bundle_type: << parameters.bundle_type >>
      get_deployment_group_arguments: << parameters.get_deployment_group_arguments >>
      deploy_bundle_arguments: << parameters.deploy_bundle_arguments >>
      profile_name: << parameters.profile_name >>
      region: << parameters.region >>
