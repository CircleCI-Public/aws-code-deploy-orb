version: 2.1
description: |
    Easily deploy applications to AWS CodeDeploy on CircleCI with the aws-code-deploy orb
display:
    home_url: https://aws.amazon.com/codedeploy/
    source_url: https://github.com/CircleCI-Public/aws-code-deploy-orb
orbs:
    aws-cli: circleci/aws-cli@0.1
commands:
    create-application:
        description: |
            Creates an application.
        parameters:
            application-name:
                description: The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
                type: string
            arguments:
                default: ""
                description: If you wish to pass any additional arguments to the aws deploy command
                type: string
        steps:
            - run:
                command: |
                    #!/bin/sh
                    ORB_EVAL_APPLICATION_NAME="$(eval echo "${ORB_EVAL_APPLICATION_NAME}")"

                    set +e
                    aws deploy get-application --application-name "${ORB_EVAL_APPLICATION_NAME}" "${ORB_VAL_ARGUMENTS}"
                    if $? -ne 0; then
                        set -e
                        echo "No application named ${ORB_EVAL_APPLICATION_NAME} found. Trying to create a new one"
                    else
                        set -e
                        echo "Application named ${ORB_EVAL_APPLICATION_NAME} already exists. Skipping creation."
                    fi
                environment:
                    ORB_EVAL_APPLICATION_NAME: << parameters.application-name >>
                    ORB_VAL_ARGUMENTS: << parameters.arguments >>
                name: ensure-application-created
    create-deployment-group:
        description: |
            Creates a deployment group to which application revisions are deployed.
        parameters:
            application-name:
                description: The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
                type: string
            arguments:
                default: ""
                description: If you wish to pass any additional arguments to the create-deployment-group command
                type: string
            deployment-config:
                default: CodeDeployDefault.OneAtATime
                description: Predefined deployment configuration name.
                enum:
                    - CodeDeployDefault.OneAtATime
                    - CodeDeployDefault.HalfAtATime
                    - CodeDeployDefault.AllAtOnce
                type: enum
            deployment-group:
                description: The name of a new deployment group for the specified application.
                type: string
            get-deployment-group-arguments:
                default: ""
                description: If you wish to pass any additional arguments to the get-deployment-group command
                type: string
            service-role-arn:
                description: The service role for a deployment group.
                type: string
        steps:
            - run:
                command: |+
                    #!/bin/sh
                    ORB_EVAL_APPLICATION_NAME="$(eval echo "${ORB_EVAL_APPLICATION_NAME}")"
                    ORB_EVAL_DEPLOYMENT_GROUP="$(eval echo "${ORB_EVAL_DEPLOYMENT_GROUP}")"

                    set +e
                    aws deploy get-deployment-group \
                    --application-name "${ORB_EVAL_APPLICATION_NAME}" \
                    --deployment-group-name "${ORB_EVAL_DEPLOYMENT_GROUP}" "${ORB_VAL_GET_DEPLOYMENT_GROUP_ARGUMENTS}"

                    if $? -ne 0; then
                      set -e
                      echo "No deployment group named ${ORB_EVAL_DEPLOYMENT_GROUP} found. Trying to create a new one"
                      aws deploy create-deployment-group \
                      --application-name  "${ORB_EVAL_APPLICATION_NAME}" \
                      --deployment-group-name "${ORB_EVAL_DEPLOYMENT_GROUP}" \
                      --deployment-config-name "${ORB_VAL_DEPLOYMENT_CONFIG}" \
                        --service-role-arn "${ORB_VAL_SERVICE_ROLE_ARN}" "${ORB_VAL_ARGUMENTS}"
                    else
                      set -e
                      echo "Deployment group named ${ORB_EVAL_DEPLOYMENT_GROUP} already exists. Skipping creation."
                    fi

                environment:
                    ORB_EVAL_APPLICATION_NAME: << parameters.application-name >>
                    ORB_EVAL_DEPLOYMENT_GROUP: << parameters.deployment-group >>
                    ORB_VAL_ARGUMENTS: << parameters.arguments >>
                    ORB_VAL_DEPLOYMENT_CONFIG: << parameters.deployment-config >>
                    ORB_VAL_GET_DEPLOYMENT_GROUP_ARGUMENTS: << parameters.get-deployment-group-arguments >>
                    ORB_VAL_SERVICE_ROLE_ARN: << parameters.service-role-arn >>
                name: ensure-deployment-created
    deploy-bundle:
        description: |
            Deploy from a bundle and wait until the deployment has successfully completed.
        parameters:
            application-name:
                description: The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
                type: string
            bundle-bucket:
                description: The s3 bucket where an application revision will be stored
                type: string
            bundle-key:
                description: A key under the s3 bucket where an application revision will be stored
                type: string
            bundle-type:
                default: zip
                description: The file type used for an application revision bundle. Currently defaults to 'zip'
                type: string
            deploy-bundle-arguments:
                default: ""
                description: If you wish to pass any additional arguments to the aws create-deployment command
                type: string
            deployment-config:
                default: CodeDeployDefault.OneAtATime
                description: Predefined deployment configuration name.
                enum:
                    - CodeDeployDefault.OneAtATime
                    - CodeDeployDefault.HalfAtATime
                    - CodeDeployDefault.AllAtOnce
                type: enum
            deployment-group:
                description: The name of a new deployment group for the specified application.
                type: string
            get-deployment-group-arguments:
                default: ""
                description: If you wish to pass any additional arguments to the get-deployment-group command
                type: string
        steps:
            - run:
                command: |
                    #!/bin/sh
                    ORB_EVAL_APPLICATION_NAME="$(eval echo "${ORB_EVAL_APPLICATION_NAME}")"
                    ORB_EVAL_DEPLOYMENT_GROUP="$(eval echo "${ORB_EVAL_DEPLOYMENT_GROUP}")"
                    ORB_EVAL_BUNDLE_BUCKET="$(eval echo "${ORB_EVAL_BUNDLE_BUCKET}")"
                    ORB_EVAL_BUNDLE_KEY="$(eval echo "${ORB_EVAL_BUNDLE_KEY}")"


                    ID=$(aws deploy create-deployment \
                        --application-name "${ORB_EVAL_APPLICATION_NAME}" \
                        --deployment-group-name "${ORB_EVAL_DEPLOYMENT_GROUP}" \
                        --deployment-config-name "${ORB_VAL_DEPLOYMENT_CONFIG}" \
                        --s3-location bucket="${ORB_EVAL_BUNDLE_BUCKET}",bundleType="${ORB_VAL_BUNDLE_TYPE}",key="${ORB_EVAL_BUNDLE_KEY}"."${ORB_VAL_BUNDLE_TYPE}" \
                        --output text \
                        --query '[deploymentId]' "${ORB_VAL_DEPLOY_BUNDLE_ARGUMENTS}")
                    STATUS=$(aws deploy get-deployment \
                        --deployment-id "$ID" \
                        --output text \
                        --query '[deploymentInfo.status]' "${ORB_VAL_GET_DEPLOYMENT_GROUP_ARGUMENTS}")
                    while [ "$STATUS" = "Created" ] || [ "$STATUS" = "InProgress" ] || [ "$STATUS" = "Pending" ] || [ "$STATUS" = "Queued" ] || [ "$STATUS" = "Ready" ]; do
                      echo "Status: $STATUS..."
                      STATUS=$(aws deploy get-deployment \
                                --deployment-id "$ID" \
                                --output text \
                                --query '[deploymentInfo.status]'"${ORB_VAL_GET_DEPLOYMENT_GROUP_ARGUMENTS}")
                      sleep 5
                    done
                    if [ "$STATUS" = "Succeeded" ]; then
                      EXITCODE=0
                      echo "Deployment finished."
                    else
                      EXITCODE=1
                      echo "Deployment failed!"
                    fi
                    aws deploy get-deployment --deployment-id "$ID" "${ORB_VAL_GET_DEPLOYMENT_GROUP_ARGUMENTS}"
                    exit $EXITCODE
                environment:
                    ORB_EVAL_APPLICATION_NAME: << parameters.application-name >>
                    ORB_EVAL_BUNDLE_BUCKET: << parameters.bundle-bucket >>
                    ORB_EVAL_BUNDLE_KEY: << parameters.bundle-key >>
                    ORB_EVAL_DEPLOYMENT_GROUP: << parameters.deployment-group >>
                    ORB_VAL_BUNDLE_TYPE: << parameters.bundle-type >>
                    ORB_VAL_DEPLOY_BUNDLE_ARGUMENTS: << parameters.deploy-bundle-arguments >>
                    ORB_VAL_DEPLOYMENT_CONFIG: << parameters.deployment-config >>
                    ORB_VAL_GET_DEPLOYMENT_GROUP_ARGUMENTS: << parameters.get-deployment-group-arguments >>
                name: deploy-bundle
    push-bundle:
        description: |
            Bundles and uploads to Amazon Simple Storage Service (Amazon S3) an application revision
        parameters:
            application-name:
                description: The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
                type: string
            arguments:
                default: ""
                description: If you wish to pass any additional arguments to the aws deploy command
                type: string
            bundle-bucket:
                description: The s3 bucket where an application revision will be stored
                type: string
            bundle-key:
                description: A key under the s3 bucket where an application revision will be stored
                type: string
            bundle-source:
                default: .
                description: The directory relative to your project to package up into an application revision.
                type: string
            bundle-type:
                default: zip
                description: The file type used for an application revision bundle. Currently defaults to 'zip'
                type: string
        steps:
            - run:
                command: |
                    #!/bin/sh
                    ORB_EVAL_APPLICATION_NAME="$(eval echo "${ORB_EVAL_APPLICATION_NAME}")"
                    ORB_EVAL_BUNDLE_BUCKET="$(eval echo "${ORB_EVAL_BUNDLE_BUCKET}")"
                    ORB_EVAL_BUNDLE_KEY="$(eval echo "${ORB_EVAL_BUNDLE_KEY}")"

                    aws deploy push \
                        --application-name  "${ORB_EVAL_APPLICATION_NAME}" \
                        --source "${ORB_VAL_BUNDLE_SOURCE}" \
                        --s3-location s3://"${ORB_EVAL_BUNDLE_BUCKET}/${ORB_EVAL_BUNDLE_KEY}.${ORB_VAL_BUNDLE_TYPE}" "${ORB_VAL_ARGUMENTS}"
                environment:
                    ORB_EVAL_APPLICATION_NAME: << parameters.application-name >>
                    ORB_EVAL_BUNDLE_BUCKET: << parameters.bundle-bucket >>
                    ORB_EVAL_BUNDLE_KEY: << parameters.bundle-key >>
                    ORB_VAL_ARGUMENTS: << parameters.arguments >>
                    ORB_VAL_BUNDLE_SOURCE: << parameters.bundle-source >>
                    ORB_VAL_BUNDLE_TYPE: << parameters.bundle-type >>
                name: push-bundle
jobs:
    deploy:
        description: |
            "Ensures an application and deployment group exist then proceeds to
              bundle and upload an application revision to S3. Once uploaded this
              job will finally create a deployment based on that revision."
        executor: aws-cli/default
        parameters:
            application-name:
                description: The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
                type: string
            arguments:
                default: ""
                description: If you wish to pass any additional arguments to the aws deploy command
                type: string
            bundle-bucket:
                description: The s3 bucket where an application revision will be stored
                type: string
            bundle-key:
                description: A key under the s3 bucket where an application revision will be stored
                type: string
            bundle-source:
                default: .
                description: The directory relative to your project to package up into an application revision.
                type: string
            bundle-type:
                default: zip
                description: The file type used for an application revision bundle. Currently defaults to 'zip'
                type: string
            deploy-bundle-arguments:
                default: ""
                description: If you wish to pass any additional arguments to the deploy-bundle command
                type: string
            deployment-config:
                default: CodeDeployDefault.OneAtATime
                description: Predefined deployment configuration name.
                type: string
            deployment-group:
                description: The name of a new deployment group for the specified application.
                type: string
            get-deployment-group-arguments:
                default: ""
                description: If you wish to pass any additional arguments to the get-deployment-group command
                type: string
            service-role-arn:
                description: The service role for a deployment group.
                type: string
        steps:
            - checkout
            - aws-cli/setup
            - create-application:
                application-name: << parameters.application-name >>
                arguments: << parameters.arguments >>
            - create-deployment-group:
                application-name: << parameters.application-name >>
                arguments: << parameters.arguments >>
                deployment-config: << parameters.deployment-config >>
                deployment-group: << parameters.deployment-group >>
                get-deployment-group-arguments: << parameters.get-deployment-group-arguments >>
                service-role-arn: << parameters.service-role-arn >>
            - push-bundle:
                application-name: << parameters.application-name >>
                arguments: << parameters.arguments >>
                bundle-bucket: << parameters.bundle-bucket >>
                bundle-key: << parameters.bundle-key >>
                bundle-source: << parameters.bundle-source >>
                bundle-type: << parameters.bundle-type >>
            - deploy-bundle:
                application-name: << parameters.application-name >>
                bundle-bucket: << parameters.bundle-bucket >>
                bundle-key: << parameters.bundle-key >>
                bundle-type: << parameters.bundle-type >>
                deploy-bundle-arguments: << parameters.deploy-bundle-arguments >>
                deployment-config: << parameters.deployment-config >>
                deployment-group: << parameters.deployment-group >>
                get-deployment-group-arguments: << parameters.get-deployment-group-arguments >>
examples:
    deploy_application:
        description: |
            Deploy an application to AWS CodeDeploy
        usage:
            version: "2.1"
            orbs:
                aws-code-deploy: circleci/aws-code-deploy@x.y
            workflows:
                deploy_application:
                    jobs:
                        - aws-code-deploy/deploy:
                            application-name: myApplication
                            bundle-bucket: myApplicationS3Bucket
                            bundle-key: myS3BucketKey
                            deployment-group: myDeploymentGroup
                            service-role-arn: myDeploymentGroupRoleARN
    override_credentials:
        description: |
            Deploy an application to AWS CodeDeploy with specific aws profile
        usage:
            version: "2.1"
            orbs:
                aws-code-deploy: circleci/aws-code-deploy@x.y
            workflows:
                deploy_application:
                    jobs:
                        - aws-code-deploy/deploy:
                            application-name: myApplication
                            arguments: --profile assume_role
                            bundle-bucket: myApplicationS3Bucket
                            bundle-key: myS3BucketKey
                            deployment-group: myDeploymentGroup
                            service-role-arn: myDeploymentGroupRoleARN

